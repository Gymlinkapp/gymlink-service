// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phoneNumber String   @unique
  firstName   String
  lastName    String
  password    String
  age         Int
  bio         String?
  images      String[]
  tags        String[]
  longitude   Float?
  latitude    Float?
  authSteps   Int      @default(0)

  // social aspects
  chats              Chat[]          @relation("participants")
  Message            Message[]
  friendRequests     FriendRequest[] @relation("toUser")
  sentFriendRequests FriendRequest[] @relation("fromUser")
  friends            User[]          @relation("friends")
  friendsRelation    User[]          @relation("friends")
  streak             Int             @default(0)

  // user settings
  tempJWT          String?
  verificationCode String?
  verified         Boolean? @default(false)

  // gym aspects
  gym   Gym?    @relation(fields: [gymId], references: [id])
  gymId String?

  schedule Schedule? @relation(fields: [scheduleId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatId     String?
  Chat       Chat?
  scheduleId String?
}

model Gym {
  id        String   @id @default(cuid())
  name      String
  location  Location @relation(fields: [locationId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // a gym could have many users.
  users      User[]
  locationId String
}

model Location {
  id   String @id @default(cuid())
  lat  Float
  long Float
  Gym  Gym[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser User @relation("fromUser", fields: [fromUserId], references: [id])
  toUser   User @relation("toUser", fields: [toUserId], references: [id])

  fromUserId String
  toUserId   String
  userId     String?
}

// the schedule will have each day of the week as an array of strings
model Schedule {
  id        String   @id @default(cuid())
  monday    String[]
  tuesday   String[]
  wednesday String[]
  thursday  String[]
  friday    String[]
  saturday  String[]
  sunday    String[]
  User      User[]
}

model Chat {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants User[]    @relation("participants")
  userId       String?   @unique
  user         User?     @relation(fields: [userId], references: [id])
  messages     Message[]
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId String

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  content String
  chat    Chat   @relation(fields: [chatId], references: [id])
}
